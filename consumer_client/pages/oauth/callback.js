import { withSessionSsr } from "../../lib/withSession";
import prisma from '../../lib/prisma.ts';
import styles from '../../styles/Home.module.css'
import Button from 'react-bootstrap/Button';
import { useRouter } from 'next/router'
import 'bootstrap/dist/css/bootstrap.min.css';

export const getServerSideProps = withSessionSsr(
    async function getServerSideProps(context) {
        //Get the oauth_token from the query string
        const { oauth_token } = context.query;

        //Get the ooauth_verifier needed to patch session fixation attack
        const { oauth_verifier } = context.query;

        var service_username = '';
        var username = '';

        //Use the authorised request token to get the access token
        const url = new URL('http://web:80/oauth/access_token');
        //Append consumer key and authorised oauth token to query parameters
        url.searchParams.append('oauth_consumer_key', '59a2980d36017a5830047fd5d0e7f982');
        url.searchParams.append('oauth_token', oauth_token);
        //Also append the new required oauth verifier parameter to prevent session fixation attack
        url.searchParams.append('oauth_verifier', oauth_verifier);
        

        //Check if session exists
        if (context.req.session.user && context.req.session.user.loggedIn)
        {
            //Wait for fetch to complete before proceeding to generate page
            await fetch(url)
            .then(res => res.json())
            .then(async json => {
                //Get the access token from response body
                const access_token = json['oauth_token'];
                const token_secret = json['oauth_token_secret'];
                service_username = json['username'];
        
                //Store in database for the user
                const user = await prisma.user.update({
                    where: { username: context.req.session.user.username },
                    data: { accessToken: access_token },
                })

                username = user.username;
                console.log(service_username)
                console.log(user)

            })
        }
        else
        {
            //Redirect back to login page if not logged in (no session)
            return {
                redirect: {
                    destination: '/login',
                    permanent: false,
                }
            }
        }

        return{
            props: {
                username,
                service_username
            }
        }
    }
)

//Page to handle oauth callbacks
export default function callback(props)
{
    const router = useRouter();

    function handleClick()
    {
        router.push('/resources')
    }

    return(
    <div className={styles.container}>
        <div className={styles.loginBox}>
            <h1>
                Verifying Authorisation with Service Provider...
            </h1>
            <p>Authorisation complete! Your account ({props.username}) has successfully connected your account to your service provider account ({props.service_username})</p>
            <p>You may now visit your resources page to view the resources you have authorised access to on the service provider</p>
            <Button onClick={handleClick}>
                Go to resources page
            </Button>
        </div>
    </div>

    )
}