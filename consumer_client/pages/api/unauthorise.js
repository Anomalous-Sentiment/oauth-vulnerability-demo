import { withSessionRoute } from "../../lib/withSession";
import prisma from '../../lib/prisma.ts';

export default withSessionRoute(unauthoriseRoute);

async function unauthoriseRoute(req, res) {

    const user = req.session.user;
    var success = false;
    

    //Get the user from the database
    const matchingUser = await prisma.user.findUnique({
        where: { username: user.username },
    });


    const url = new URL('http://web:80/api/deauth');

    //Append consumer key and authorised oauth token to query parameters
    url.searchParams.append('oauth_consumer_key', '59a2980d36017a5830047fd5d0e7f982');
    url.searchParams.append('oauth_token', matchingUser.accessToken);

    
    //Send request to service provider to unauthorise access token
    const jsonRes = await fetch(url).then(res => res.json());

    if (jsonRes['stat'] == 'ok')
    {
        success = true;

        //Update database
        const updatedUser = await prisma.user.update({
            where: { username: matchingUser.username },
            data: { accessToken: null },
        })
    }
    



    //Return json object with value to indicate whether operation was successsful
    res.send({success: success});
}