import Button from 'react-bootstrap/Button';
import styles from '../styles/Home.module.css'
import NavigationBar from '../components/NavigationBar'
import Table from 'react-bootstrap/Table';
import { useRouter } from 'next/router'
import Alert from 'react-bootstrap/Alert';
import { withSessionSsr } from "../lib/withSession";
import prisma from '../lib/prisma.ts';
import 'bootstrap/dist/css/bootstrap.min.css';
import { useState } from 'react';

export const getServerSideProps = withSessionSsr(
  async function getServerSideProps({ req }) {
    var currUser = null;
    var authorised = false;
    var data = null;

    //Check if session exists
    if (req.session.user && req.session.user.loggedIn)
    {
        currUser = req.session.user;


        //Get the current user
        const user = await prisma.user.findUnique({
          where: { username: currUser.username },
        });

        if (user)
        {    
          if (user.accessToken)
          {
            authorised = true;

            //Get the data from the service provider
            const url = new URL('http://web:80/api/user_data');

            //Append consumer key and authorised oauth token to query parameters
            url.searchParams.append('oauth_consumer_key', '59a2980d36017a5830047fd5d0e7f982');
            url.searchParams.append('oauth_token', user.accessToken);
      
            //Wait for data retrieval from service provider
            await fetch(url).then(res => res.json()).then(json => data = json)
          }

        }
        else
        {
          //User session exists but does not exist in database
          req.session.destroy();

          //Redirect to login page to login again
          return {
            redirect: {
              destination: '/login',
              permanent: false,
            }
          }

        }
    }
    else
    {
        //Redirect back to login page if not logged in (no session)
        return {
            redirect: {
              destination: '/login',
              permanent: false,
            }
        }
    }





    return {
      props: {
        'username': currUser.username,
        'authorised': authorised,
        'data' : data
      },
    };
  },
);

export default function resources({username, authorised, data})
{
  const router = useRouter();
  const [showAlert, setShow] = useState(false);

  var displayElement = (
    <div>
      <p>Currently not authorised</p>
      <Button
      onClick={handleAuthorisation}
      >Authorise on Service Provider</Button>
    </div>
  )

  function unLink()
  {
    //Send a request to the consumer server to unlink the account with service provider
    fetch('api/unauthorise').then(res => res.json())
    .then(json => {
      //Check unlinking status
      if (json['success'])
      {
        //Reload the page on successful unlinking
        router.reload(window.location.pathname)
      }
      else
      {
        setShow(true)
      }

    })
  }


  if (authorised)
  {
    const dataList = [];
    var tableRows;

    //Display service provider content instead
    for (var key in data) {
      if (data.hasOwnProperty(key)) {
          console.log(key + " -> " + data[key]);
          //Add all data pairs to list
          dataList.push({'key' : key, 'value' : data[key]})

          //Map all pairs to an table row element
          tableRows = dataList.map((listElement, index) => {
            return(
              <tr key={listElement['key']}>
                <td>{index + 1}</td>
                <td>{listElement['key']}</td>
                <td>{listElement['value']}</td>
              </tr>
            )
          })

          //Insert the mapped rows into a table format to display
          displayElement = (
            <>
              <Table striped bordered hover>
                <thead>
                  <tr>
                    <th>#</th>
                    <th>Data</th>
                    <th>Value</th>
                  </tr>
                </thead>
                <tbody>
                  {tableRows}
                </tbody>
              </Table>
              <Button onClick={unLink}>
                Unlink
              </Button>
            </>

          )
      }
  }
  }


  function handleAuthorisation()
  {
    //Get request token from service provider
    const url = new URL('http://localhost:8100/oauth/request_token');
    url.searchParams.append('oauth_consumer_key', '59a2980d36017a5830047fd5d0e7f982');
    

    fetch(url, { mode: 'cors' })
    .then(res => res.json())
    .then(json => {
      console.log(json)
      const reqToken = json['oauth_token'];
      const tokenSecret = json['oauth_token_secret'];

      const authUrl = new URL('http://localhost:8100/oauth/authorize');
      authUrl.searchParams.append('oauth_token', reqToken);
      authUrl.searchParams.append('oauth_callback', 'http://localhost:4000/oauth/callback');


      window.location = authUrl.toString();
  
    })
  }
    
    return(
        <div className={styles.container}>
            <div className={styles.loginBox}>
            <NavigationBar/>
            <h1>
            Service Provider Resources
            </h1>
            <h2>
                Information
            </h2>
            <p>
                This is a page which will display the service provider resources that you have authorised this app to access.
            </p>
            <h2>
                You are logged in as: {username}
            </h2>
            <h3>
                Service Provider Authorised Resources:
            </h3>
            { displayElement }
            </div>
            {
              showAlert &&
              <Alert variant='danger'>
              Error. Unable to unlink
              </Alert>
            }
        </div>
    )
}